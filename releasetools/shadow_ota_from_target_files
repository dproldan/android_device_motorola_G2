#!/usr/bin/env python
#
# Copyright (C) 2008 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Given a target-files zipfile, produces an OTA package that installs
that build.  An incremental OTA is produced if -i is given, otherwise
a full OTA is produced.

Usage:  ota_from_target_files [flags] input_target_files output_ota_package

"""

import sys

if sys.hexversion < 0x02040000:
  print >> sys.stderr, "Python 2.4 or newer is required."
  sys.exit(1)

import imp
import os

# append the build/tools/releasetools directory
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "..", "..", "build", "tools", "releasetools")))

import common
import shadow_edify_generator

# source build/tools/releasetools/ota_from_target_files so we can use/override it
ota = imp.load_source("ota", os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "..", "..", "build", "tools", "releasetools", "ota_from_target_files")))

def WriteFullOTAPackage(input_zip, output_zip):
  script = shadow_edify_generator.ShadowEdifyGenerator(3, ota.OPTIONS.info_dict)

  metadata = {"post-build": ota.GetBuildProp("ro.build.fingerprint", input_zip),
              "pre-device": ota.GetBuildProp("ro.product.device", input_zip),
              "post-timestamp": ota.GetBuildProp("ro.build.date.utc", input_zip),
              }

  device_specific = common.DeviceSpecificParams(
      input_zip=input_zip,
      input_version=ota.OPTIONS.info_dict["recovery_api_version"],
      output_zip=output_zip,
      script=script,
      input_tmp=ota.OPTIONS.input_tmp,
      metadata=metadata,
      info_dict=ota.OPTIONS.info_dict)

  script.AssertKernelVersion()
  ota.AppendAssertions(script, input_zip)
  device_specific.FullOTA_Assertions()

  # check for CM backuptool
  if (hasattr(ota.OPTIONS, 'backuptool') and
      ota.OPTIONS.backuptool):
    script.RunBackup("backup")

  script.ShowProgress(0.5, 0)

  if ota.OPTIONS.wipe_user_data:
    script.FormatPartition("/data")

  script.RunFormatAndTuneSystem()
  script.Mount("/system")
  script.UnpackPackageDir("system", "/system")

  (symlinks, retouch_files) = ota.CopySystemFiles(input_zip, output_zip)
  script.MakeSymlinks(symlinks)
  if ota.OPTIONS.aslr_mode:
    script.RetouchBinaries(retouch_files)
  else:
    script.UndoRetouchBinaries(retouch_files)

  ota.Item.GetMetadata(input_zip)
  ota.Item.Get("system").SetPermissions(script)

  script.ShowProgress(0.2, 0)

  script.RunUpdateKernel()

  # check for CM backuptool
  if (hasattr(ota.OPTIONS, 'backuptool') and
      ota.OPTIONS.backuptool):
    script.ShowProgress(0.2, 10)
    script.RunBackup("restore")

  script.ShowProgress(0.2, 10)

  script.RunFinalReleaseUtils()

  script.ShowProgress(0.1, 0)
  device_specific.FullOTA_InstallEnd()

  if ota.OPTIONS.extra_script is not None:
    script.AppendExtra(ota.OPTIONS.extra_script)

  script.UnmountAll()
  script.AddToZip(input_zip, output_zip)
  ota.WriteMetadata(metadata, output_zip)

# override the default OTA package script
ota.WriteFullOTAPackage = WriteFullOTAPackage

# make sure ext3 is listed as a partition type
if "ext3" not in common.PARTITION_TYPES:
  common.PARTITION_TYPES["ext3"] = "EMMC"

if __name__ == '__main__':
  try:
    common.CloseInheritedPipes()
    ota.main(sys.argv[1:])
  except common.ExternalError, e:
    print
    print "   ERROR: %s" % (e,)
    print
    sys.exit(1)
